{"componentChunkName":"component---src-templates-blog-post-js","path":"/lazyload-images-the-browser-way/","result":{"data":{"site":{"siteMetadata":{"title":"itsopensource"}},"markdownRemark":{"id":"fb715e91-0b05-5f9e-baef-3ce5f8326f5f","excerpt":"One of the biggest performance wins for image-extensive webpages is . Normally, the browser fetches all the required resources from the server as soon as…","html":"<p>One of the biggest performance wins for image-extensive webpages is <code class=\"language-text\">lazy loading</code>. Normally, the browser fetches all the required resources from the server as soon as possible. When the website has lots of images this goes against the speed and performance of the website. Consider a page loading 100s of <a href=\"https://itsopensource.com/demos/lazyload/\">dog images</a>, there will be 100 asynchronous http requests. The more the http requests, the slower the website.</p>\n<p>All images are required for the functionality of the website, but they might NOT be required on the FIRST load. Here <code class=\"language-text\">Lazy loading</code> does the magic— images will be fetched only when they are required for the content in the current view port. So for a long image-extensive page, the images which are required by the top part of a website will be initially fetched on the first load and as the website is scrolled down, the respective images are fetched.</p>\n<p>This has been practiced for a while and various Javascript libraries are built to achieve this.</p>\n<ul>\n<li><a href=\"https://plugins.jquery.com/lazyload/\">Jquery Lazyload</a></li>\n<li><a href=\"https://github.com/verlok/lazyload\">Vanilla Lazyload</a></li>\n<li><a href=\"https://github.com/aFarkas/lazysizes\">LazySizes</a></li>\n</ul>\n<p>The list goes on. But the good news is the specification for native image lazyloading has been merged into the HTML standards. Check <a href=\"https://github.com/whatwg/html/pull/3752#issuecomment-585202516\">HTML standard repo</a>.</p>\n<p>Official specs - <a target=\"_blank\" href=\"https://html.spec.whatwg.org/multipage/urls-and-fetching.html#lazy-loading-attributes\" ><a href=\"https://html.spec.whatwg.org/multipage/urls-and-fetching.html#lazy-loading-attributes\">https://html.spec.whatwg.org/multipage/urls-and-fetching.html#lazy-loading-attributes</a></a></p>\n<p>With this we don’t need any lazy loading libraries anymore and all we need to do is the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">loading</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>lazy<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://placedog.net/400/400/random<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>doggo<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Notice the <code class=\"language-text\">loading</code> attribute, this is the magic keyword. It accepts 3 values <code class=\"language-text\">auto</code>, <code class=\"language-text\">lazy</code>, <code class=\"language-text\">eager</code></p>\n<ul>\n<li><code class=\"language-text\">auto</code> - this is equivalent to not including the <code class=\"language-text\">loading</code> attribute. This sets the default browser behavior for images.</li>\n<li><code class=\"language-text\">lazy</code> - fetches images only when the element is in/near the viewport.</li>\n<li><code class=\"language-text\">eager</code> - fetches the images immediately.</li>\n</ul>\n<p><code class=\"language-text\">Lazyload</code> will soon be supported in all major browsers by default. But if you want to test it, you can turn on the browser’s experimental flags:</p>\n<p><strong>Firefox (>=75):</strong></p>\n<ol>\n<li>Goto <code class=\"language-text\">about:config</code></li>\n<li>Set <code class=\"language-text\">dom.image-lazy-loading.enabled</code> to <code class=\"language-text\">true</code></li>\n</ol>\n<p><strong>Chrome (>=76):</strong></p>\n<ol>\n<li>Goto <code class=\"language-text\">chrome://flags</code></li>\n<li>Set <code class=\"language-text\">Enable lazy image loading</code> to <code class=\"language-text\">Enabled</code></li>\n</ol>\n<p>Demo: <a href=\"https://itsopensource.com/demos/lazyload/\" target=\"_blank\"><a href=\"https://itsopensource.com/demos/lazyload/\">https://itsopensource.com/demos/lazyload/</a></a></p>\n<center><sub>Lazyload in action</sub></center>\n<p><img src=\"/2fde43a35f25e5c34aab9ae93173e552/lazyload.gif\" alt=\"Lazyload in action\"></p>","frontmatter":{"title":"Lazyload images the browser way","tags":["HTML","Javascript"],"date":"February 21, 2020","description":"Enough of lazyloading libraries, finally browser supports lazyloading natively.","author":"trishul","featuredImage":null}}},"pageContext":{"slug":"/lazyload-images-the-browser-way/","previous":{"fields":{"slug":"/sleep-function-in-javascript/"},"frontmatter":{"author":"trishul","tags":["javascript"],"title":"Sleep function in Javascript"}},"next":{"fields":{"slug":"/clojure-introduction-features/"},"frontmatter":{"author":"sonia","tags":["clojure","programming"],"title":"An Introduction to Clojure, features, and usability"}}}},"staticQueryHashes":["4268877247","764694655"],"slicesMap":{}}